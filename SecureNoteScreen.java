/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hema
 */
public class SecureNoteScreen extends javax.swing.JFrame {

    /**
     * Creates new form LoadedNotes
     */
    public SecureNoteScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(9, 1, 130));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 600));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project/logo.jpg"))); // NOI18N

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 214, 10));
        jLabel2.setText("UserFolderName");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 214, 10));
        jLabel4.setText("Tittle");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 214, 10));
        jLabel8.setText("Password");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Note...\n");
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("addPhoto");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("addSketch");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project/saveNote.jpg"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 214, 10));
        jLabel6.setText("Loaded Notes:");

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("ShowNotes");
        jButton5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153)));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 214, 10));
        jLabel3.setText("Save Note:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4))
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel12))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel12)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(41, 41, 41))))
        );

        jPanel3.setBackground(new java.awt.Color(255, 214, 10));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 200));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("ShowImage");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("ShowContent");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(0, 0, 153)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        SwingUtilities.invokeLater(
                () -> {
                    JFrame frame = new JFrame("Image Display");
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                    // Provide the path to your image file
                    String imagePath = jTextField3.getText();

                    // Create an ImageIcon with the specified image path
                    ImageIcon imageIcon = new ImageIcon(imagePath);

                    // Create a JLabel to display the image
                    JLabel label = new JLabel(imageIcon);

                    // Add the JLabel to the frame
                    frame.getContentPane().add(label, BorderLayout.CENTER);

                    // Set frame properties
                    frame.setSize(400, 400);
                    frame.setLocationRelativeTo(null); // Center the frame
                    frame.setVisible(true);

                });
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        SecureNote note = new SecureNote(jPasswordField1.getText());

        JFrame frame = new JFrame("Content");
        JPanel panel = new JPanel();
        panel.setBackground(Color.white);
        JTextArea textArea = new JTextArea(10, 30);
        textArea.setText(jTextArea1.getText());
        JScrollPane scrollPane = new JScrollPane(textArea);
        panel.setLayout(new BorderLayout());
        panel.add(scrollPane, BorderLayout.CENTER);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.add(panel);
        JTextPane noteTextPane = new JTextPane();
        String CheckPassword = JOptionPane.showInputDialog(this, "Enter Password:");
        if (CheckPassword == null ? jPasswordField1.getText() == null : CheckPassword.equals(jPasswordField1.getText())) {
            frame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Password!", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        jTextField3.setText(fileName);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        //        JFileChooser chooser = new JFileChooser();
        //        chooser.showOpenDialog(null);
        //        File f = chooser.getSelectedFile();
        //        String fileName = f.getAbsolutePath();
        //        jTextField2.setText(fileName);c
        new HandSketchApp().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked

        // Specify the source photo file
        File sourcePhoto = new File(jTextField3.getText());
        // Specify the destination folder
        File destinationFolder = new File("C:\\Users\\Hema\\Documents\\NetBeansProjects\\Project\\UsersFolder\\" + jTextField1.getText());

        try {
            // Ensure the destination folder exists
            if (!destinationFolder.exists()) {
                destinationFolder.mkdirs(); // Create folders if they don't exist
            }

            // Construct the destination path
            Path destinationPathP = destinationFolder.toPath().resolve(sourcePhoto.getName());

            // Copy the photo to the destination folder
            Files.copy(sourcePhoto.toPath(), destinationPathP, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("Photo added to the folder successfully.");

        } catch (IOException e) {
            System.err.println("Photo Not Found");

        }

        File sourceSketch = new File("C:\\Users\\Hema\\Documents\\NetBeansProjects\\Project\\" + jTextField1.getText() + ".jpg");

        // Specify the destination folder
        try {
            // Ensure the destination folder exists
            if (!destinationFolder.exists()) {
                destinationFolder.mkdirs(); // Create folders if they don't exist
            }

            // Construct the destination path
            Path destinationPathS = destinationFolder.toPath().resolve(sourceSketch.getName());

            // Copy the photo to the destination folder
            Files.copy(sourceSketch.toPath(), destinationPathS, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("Sketch added to the folder successfully");

        } catch (IOException e) {
            System.err.println("Sketch not found");

        }
        //List
        SecureNote noteToSave = new SecureNote(jPasswordField1.getText());
        List<SecureNote> notes = new ArrayList<>();
//        JFrame frame1 = new JFrame("Loaded Notes");
//
//        DefaultTableModel tableModel = new DefaultTableModel();
//
//        tableModel.addColumn("Note No.");
//        tableModel.addColumn("Note Name");
//        tableModel.addRow(new Object[]{noteToSave.getNoteId(), jTextField2.getText()});
//        JTable table = new JTable(tableModel);
//        JScrollPane scrollPane = new JScrollPane(table);
//        frame1.setSize(400, 300);
//        frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame1.add(scrollPane);
//        frame1.setVisible(true);

        // Using mkdirs() to create a directory and its parent directories if they don't exist
        String nestedFolderPath = "C:\\Users\\Hema\\Documents\\NetBeansProjects\\Project\\UsersFolder\\" + jTextField1.getText();  // Change this to your desired path

        File nestedFolder = new File(nestedFolderPath);
//        boolean success = nestedFolder.mkdirs();
//
//        if (success) {
//            System.out.println("folder created successfully");
//        } else {
//            System.err.println("Failed to create folder");
//        }

//                //Image
//                SwingUtilities.invokeLater(
//                    () -> {
//                        JFrame frame = new JFrame("Image Display");
//                        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//
//                        // Provide the path to your image file
//                        String imagePath = jTextField2.getText();
//
//                        // Create an ImageIcon with the specified image path
//                        ImageIcon imageIcon = new ImageIcon(imagePath);
//
//                        // Create a JLabel to display the image
//                        JLabel label = new JLabel(imageIcon);
//
//                        // Add the JLabel to the frame
//                        frame.getContentPane().add(label, BorderLayout.CENTER);
//
//                        // Set frame properties
//                        frame.setSize(800, 800);
//                        frame.setLocationRelativeTo(null); // Center the frame
//                        frame.setVisible(true);
//
//                    });
        //Note
        // Creating and saving a Note with an Image
        noteToSave.setNoteId(noteToSave.getNoteId());
        noteToSave.setTittle(jTextField2.getText());
        noteToSave.setContent(jTextArea1.getText());
        //image
        Image imageToSave = new Image();
        imageToSave.setImageId(imageToSave.getImageId());
        noteToSave.addImage(imageToSave);
        //sketch
//                    Sketch sketchToSave = new Sketch();
//                    sketchToSave.setSketchId(sketchToSave.getSketchId());
////                    sketchToSave.setContent("This is a test sketch.");
//                    noteToSave.addSketch(sketchToSave);
        //        //secure
        //        SecureNote secureNoteToSave = new SecureNote("securePassword");
        //        noteToSave.setSecureNote(secureNoteToSave);
        FileManager fileManager = new FileManager();
        fileManager.saveSecureNote(noteToSave, jTextField1.getText());

        // Loading Notes
        List<SecureNote> loadedNotes = fileManager.loadSecureNotes(jTextField1.getText());

        // Displaying loaded Notes
        for (SecureNote loadedNote : loadedNotes) {
            System.out.println("Loaded Note:");
            System.out.println("Note ID: " + loadedNote.getNoteId());
            System.out.println("Note Tittle: " + loadedNote.getTittle());
            System.out.println("Content: " + loadedNote.getContent());

            // Displaying loaded Images for the Note
            for (Image loadedImage : loadedNote.getImages()) {
                System.out.println("Loaded Image:");
                System.out.println("Image ID: " + loadedImage.getImageId());
            }
            for (Sketch loadedSketch : loadedNote.getSketches()) {
                System.out.println("Loaded Sketch:");
                System.out.println("Sketch ID: " + loadedSketch.getSketchId());
            }

            // Displaying loaded SecureNote for the Note
            //            SecureNote loadedSecureNote = loadedNote.getSecureNote();
            //            if (loadedSecureNote != null) {
            //                System.out.println("Loaded SecureNote:");
            //                System.out.println("Password: " + loadedSecureNote.getPassword());
            //            }
            System.out.println();
        }
        this.setVisible(true);
        //        new LoadedNotes().setVisible(true);
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        File defaultDirectory = new File("C:\\Users\\Hema\\Documents\\NetBeansProjects\\Project\\UsersFolder\\" + jTextField1.getText());

            JFileChooser fileChooser = new JFileChooser(defaultDirectory);
            fileChooser.setDialogTitle("Loaded Notes");
            fileChooser.setFileFilter(new FileNameExtensionFilter("txt files", "txt", "jpg"));
            int userSelection = fileChooser.showOpenDialog(this);
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToLoad = fileChooser.getSelectedFile();
                try (BufferedReader reader = new BufferedReader(new FileReader(fileToLoad))) {
                    String line;
                    Note note = new Note();

                    while ((line = reader.readLine()) != null) {
                        if (line.startsWith("Note ID:")) {
                            note.setNoteId(Integer.parseInt(line.split(":")[1].trim()));
                        } else if (line.startsWith("Note Tittle:")) {
                            note.setTittle(line.substring("Tittle:".length()).trim());
                        } else if (line.startsWith("Created Date:")) {
                            note.setCreatedDate(parseDate(line.split(":")[1].trim()));
                        } else if (line.startsWith("Content:")) {
                            note.setContent(line.substring("Content:".length()).trim());
                        } else if (line.startsWith("Last Modified:")) {
                            note.setLastModified(parseDate(line.split(":")[1].trim()));
                        } else if (line.startsWith("Image ID:")) {
                            Image image = readImageFromFile(reader);
                            note.addImage(image);
                        } else if (line.startsWith("Sketch ID:")) {
                            Sketch sketch = readSketchFromFile(reader);
                            note.addSketch(sketch);
                        } else if (line.startsWith("Secure Note - Password:")) {
                            SecureNote secureNote = new SecureNote(line.split(":")[1].trim());
                            note.setSecureNote(secureNote);
                        }
                    }
                    jTextArea1.setText(note.getContent());
                } catch (IOException e) {
                    System.err.println("Note Not Found");
                    System.err.println("Wrong dara entry");

                }
                defaultDirectory = fileChooser.getCurrentDirectory();
            }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecureNoteScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecureNoteScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecureNoteScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecureNoteScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecureNoteScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
    public class HandSketchApp extends JFrame {

        private int prevX, prevY;
        private Canvas canvas;
        private File defaultDirectory = new File("C:\\Users\\Hema\\Documents\\NetBeansProjects\\Project\\UsersFolder\\" + jTextField1.getText());

        public HandSketchApp() {
            setTitle("Sketch App");
            setSize(800, 600);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            canvas = new Canvas();
            canvas.setBackground(Color.WHITE);

            JButton saveButton = new JButton("Save Sketch as JPG");
            saveButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    saveSketchAsJPG();
                }
            });

            JButton loadButton = new JButton("Load JPG Sketch");
            loadButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    loadJPGSketch();
                }
            });

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(saveButton);
            buttonPanel.add(loadButton);

            canvas.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    prevX = e.getX();
                    prevY = e.getY();

                }
            });

            canvas.addMouseMotionListener(new MouseAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    Graphics g = canvas.getGraphics();
                    g.setColor(Color.BLACK);
                    g.drawLine(prevX, prevY, e.getX(), e.getY());
                    canvas.addPoint(e.getX(), e.getY());
                    prevX = e.getX();
                    prevY = e.getY();
                }
            });

            add(buttonPanel, BorderLayout.NORTH);
            add(canvas);
        }

        private void saveSketchAsJPG() {
            try {
                BufferedImage image = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d = image.createGraphics();
                canvas.paint(g2d);

//                JFileChooser fileChooser = new JFileChooser();
//                fileChooser.setDialogTitle("Save Sketch as JPG");
//                fileChooser.setFileFilter(new FileNameExtensionFilter("JPEG files", "jpg", "jpeg"));
//                int userSelection = fileChooser.showSaveDialog(this);
//                if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = new File(jTextField1.getText());
                if (!fileToSave.getName().toLowerCase().endsWith(".jpg")) {
                    fileToSave = new File(fileToSave.getParentFile(), fileToSave.getName() + ".jpg");
                }
                ImageIO.write(image, "jpg", fileToSave);
                JOptionPane.showMessageDialog(this, "Sketch saved as JPG successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving the sketch as JPG!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        private void loadJPGSketch() {
            try {
                JFileChooser fileChooser = new JFileChooser(defaultDirectory);
                fileChooser.setDialogTitle("Load JPG Sketch");
                fileChooser.setFileFilter(new FileNameExtensionFilter("JPEG files", "jpg", "jpeg"));

                int userSelection = fileChooser.showOpenDialog(this);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToLoad = fileChooser.getSelectedFile();
                    BufferedImage image = ImageIO.read(fileToLoad);
                    canvas.loadImage(image);
                    JOptionPane.showMessageDialog(this, "JPG Sketch loaded successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    defaultDirectory = fileChooser.getCurrentDirectory();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading the JPG sketch!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        private class Canvas extends JPanel {

            private java.util.List<Integer> xPoints = new java.util.ArrayList<>();
            private java.util.List<Integer> yPoints = new java.util.ArrayList<>();

            public void addPoint(int x, int y) {
                xPoints.add(x);
                yPoints.add(y);
                repaint();
            }

            public java.util.List<Integer> getXPoints() {
                return xPoints;
            }

            public java.util.List<Integer> getYPoints() {
                return yPoints;
            }

            public void clear() {
                xPoints.clear();
                yPoints.clear();
                repaint();
            }

            public void loadImage(BufferedImage image) {
                Graphics g = getGraphics();
                g.drawImage(image, 0, 0, this);
            }

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.BLACK);
                for (int i = 1; i < xPoints.size(); i++) {
                    int x1 = xPoints.get(i - 1);
                    int y1 = yPoints.get(i - 1);
                    int x2 = xPoints.get(i);
                    int y2 = yPoints.get(i);
                    g.drawLine(x1, y1, x2, y2);
                }
            }
        }
    }
  private Note readNoteFromFile(File noteFile) {
        try (BufferedReader reader = new BufferedReader(new FileReader(noteFile))) {
            String line;
            Note note = new Note();

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Note ID:")) {
                    note.setNoteId(Integer.parseInt(line.split(":")[1].trim()));
                } else if (line.startsWith("Note Tittle:")) {
                    note.setTittle(line.substring("Tittle:".length()).trim());
                } else if (line.startsWith("Created Date:")) {
                    note.setCreatedDate(parseDate(line.split(":")[1].trim()));
                } else if (line.startsWith("Content:")) {
                    note.setContent(line.substring("Content:".length()).trim());
                } else if (line.startsWith("Last Modified:")) {
                    note.setLastModified(parseDate(line.split(":")[1].trim()));
                } else if (line.startsWith("Image ID:")) {
                    Image image = readImageFromFile(reader);
                    note.addImage(image);
                } else if (line.startsWith("Sketch ID:")) {
                    Sketch sketch = readSketchFromFile(reader);
                    note.addSketch(sketch);
                } else if (line.startsWith("Secure Note - Password:")) {
                    SecureNote secureNote = new SecureNote(line.split(":")[1].trim());
                    note.setSecureNote(secureNote);
                }
            }

            return note;
        } catch (IOException e) {
            System.err.println("Note Not Found");
            System.err.println("Wrong dara entry");

            return null;
        }
    }

    public List<Note> loadNotes(String userFolder) {
        List<Note> notes = new ArrayList<>();

        File folder = new File(userFolder);
        File[] noteFiles = folder.listFiles((dir, name) -> name.startsWith("note_") && name.endsWith(".txt"));

        if (noteFiles != null) {
            for (File noteFile : noteFiles) {
                Note note = readNoteFromFile(noteFile);
                if (note != null) {
                    notes.add(note);
                }
            }
        }

        return notes;
    }

    private Date parseDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            return dateFormat.parse(dateString);
        } catch (ParseException e) {
            System.err.println("Error Date");

            return null;
        }
    }

    private Image readImageFromFile(BufferedReader reader) throws IOException {
        Image image = new Image();

        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("Image ID:")) {
                image.setImageId(Integer.parseInt(line.split(":")[1].trim()));
            }
        }

        return image;
    }

    private Sketch readSketchFromFile(BufferedReader reader) throws IOException {
        Sketch sketch = new Sketch();

        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("Sketch ID:")) {
                sketch.setSketchId(Integer.parseInt(line.split(":")[1].trim()));
            }
        }

        return sketch;
    }

    public void saveImage(Image image, String userFolder) {
        String filePath = "UsersFolder" + File.separator + userFolder + File.separator + "image_" + image.getImageId() + ".jpg";

        try {
            Files.copy(image.getFile().toPath(), new File(filePath).toPath(), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
//            System.err.println("Image Not Found");

        }
    }

    public List<Image> loadImages(String userFolder) {
        List<Image> images = new ArrayList<>();

        File folder = new File(userFolder);
        File[] imageFiles = folder.listFiles((dir, name) -> name.startsWith("image_") && name.endsWith(".jpg"));

        if (imageFiles != null) {
            for (File imageFile : imageFiles) {
                Image image = readImageFromFile(imageFile);
                if (image != null) {
                    images.add(image);
                }
            }
        }

        return images;
    }

    private Image readImageFromFile(File imageFile) {
        Image image = new Image();

        String fileName = imageFile.getName();
        int imageId = Integer.parseInt(fileName.substring(fileName.indexOf("_") + 1, fileName.indexOf(".")));
        image.setImageId(imageId);

        image.setFile(imageFile);

        return image;
    }

    public void saveSketch(Sketch sketch, String userFolder) {
        String filePath = "UsersFolder" + File.separator + userFolder + File.separator + "sketch_" + sketch.getSketchId() + ".txt";

        try (PrintWriter writer = new PrintWriter(new FileWriter(filePath))) {
            writer.println("Sketch ID: " + sketch.getSketchId());

            writer.println("Sketch Content:");
            writer.println(sketch.getContent());
        } catch (IOException e) {
//            System.err.println("Sketch Not Found");

        }
    }

    public List<Sketch> loadSketches(String userFolder) {
        List<Sketch> sketches = new ArrayList<>();

        File folder = new File(userFolder);
        File[] sketchFiles = folder.listFiles((dir, name) -> name.startsWith("sketch_") && name.endsWith(".txt"));

        if (sketchFiles != null) {
            for (File sketchFile : sketchFiles) {
                Sketch sketch = readSketchFromFile(sketchFile);
                if (sketch != null) {
                    sketches.add(sketch);
                }
            }
        }

        return sketches;
    }

    private Sketch readSketchFromFile(File sketchFile) {
        try (BufferedReader reader = new BufferedReader(new FileReader(sketchFile))) {
            String line;
            Sketch sketch = new Sketch();

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Sketch ID:")) {
                    sketch.setSketchId(Integer.parseInt(line.split(":")[1].trim()));
                } else if (line.startsWith("Sketch Content:")) {
                    StringBuilder content = new StringBuilder();
                    while ((line = reader.readLine()) != null) {
                        content.append(line).append("\n");
                    }
                    sketch.setContent(content.toString().trim());
                }
            }

            return sketch;
        } catch (IOException e) {
            System.err.println("Sketch Not Found");
            return null;
        }
    }

}
